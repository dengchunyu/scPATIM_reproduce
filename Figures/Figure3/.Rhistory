seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
1e+05
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & nCount_RNA < 1e+05)
seudat
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 7000 & nCount_RNA < 1e+05)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 4000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- ScaleData(seudat)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 4000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 50)
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:50)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:50)
seudat <- FindNeighbors(seudat, dims = 1:50)
seudat <- FindClusters(seudat, resolution = 0.5)
seudat
DimPlot(seudat, reduction = "umap")
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 30)
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:30)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:30)
seudat <- FindNeighbors(seudat, dims = 1:30)
seudat <- FindClusters(seudat, resolution = 0.5)
DimPlot(seudat, reduction = "umap")
DimPlot(seudat, reduction = "tsne")
library(Seurat)
file_directory <- "/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/WorkFiles/标书张老师/单细胞课件/GSE232525_RAW/"
file_pre <- c("GSM7349819_JCML1","GSM7349821_JCML2");
data <- Read10X(data.dir = paste(file_directory,file_pre,sep=""));
class(data)
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 4000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 30)
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:30)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:30)
seudat <- FindNeighbors(seudat, dims = 1:30)
seudat <- FindClusters(seudat, resolution = 0.5)
DimPlot(seudat, reduction = "tsne")
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 3000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
gc()
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 30)
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:30)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:30)
seudat <- FindNeighbors(seudat, dims = 1:30)
seudat <- FindClusters(seudat, resolution = 0.5)
DimPlot(seudat, reduction = "tsne")
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 2000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 10)
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:10)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:10)
seudat <- FindNeighbors(seudat, dims = 1:10)
seudat <- FindClusters(seudat, resolution = 0.5)
DimPlot(seudat, reduction = "tsne")
DimPlot(seudat, reduction = "tsne")
DimPlot(seudat, reduction = "UMAP")
DimPlot(seudat, reduction = "umap")
seudat
gc()
setwd(file_directory)
saveRDS(seudat,file = "seudat.rds")
library(harmony)
library(harmony)
colnames(seudat@meta.data）
colnames(seudat@meta.data)
head(seudat@meta.data)
seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction = "pca",
dims.use = 1:30,
group.by.vars = "orig.ident")
?RunHarmony
seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction.use = "pca",
dims.use = 1:30,
group.by.vars = "orig.ident")
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 2000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
library(harmony)
head(seudat@meta.data)
seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction.use = "pca",
dims.use = 1:30,
group.by.vars = "orig.ident")
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 10)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 10)
library(harmony)
head(seudat@meta.data)
seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction.use = "pca",
dims.use = 1:10,
group.by.vars = "orig.ident")
seudat
gc()
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 2000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 10)
DimPlot(seudat, reduction = "pca")
head(seudat@meta.data)
seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction.use = "pca",
dims.use = 1:10,
group.by.vars = "orig.ident")
DimPlot(seudat, reduction = "pca")
seudat <- CreateSeuratObject(counts = data,min.cells=3, min.features=200,cell_cycle_genes=cell_cycle_genes, project="CRC");
seudat
seudat[["percent.mt"]] <- PercentageFeatureSet(seudat, pattern = "^mt-")
seudat[["percent.ribo"]] <- PercentageFeatureSet(seudat, pattern = "^Rp[sl][[:digit:]]")
# Visualize QC metrics as a violin plot
VlnPlot(seudat, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.ribo"), ncol = 4)
FeatureScatter(seudat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
seudat <- subset(seudat, subset = nFeature_RNA > 200 & nFeature_RNA < 2000)
seudat
seudat <- NormalizeData(seudat, normalization.method = "LogNormalize", scale.factor = 10000)
seudat <- ScaleData(seudat)
seudat <- FindVariableFeatures(seudat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seudat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seudat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
#pca降维
seudat <- RunPCA(object = seudat, assay = "RNA", npcs = 10)
DimPlot(seudat, reduction = "pca")
#去批次
library(harmony)
head(seudat@meta.data)
rebat_seudat <- RunHarmony(object = seudat,
assay.use = "RNA",
reduction.use = "pca",
dims.use = 1:10,
group.by.vars = "orig.ident")
DimPlot(seudat, reduction = "pca")
seudat
seudat <- RunTSNE(object = seudat,assay = "RNA", reduction = "pca", dims = 1:10)
seudat <- RunUMAP(object = seudat, assay ="RNA", reduction = "pca", dims = 1:10)
seudat <- FindNeighbors(seudat, dims = 1:10)
seudat <- FindClusters(seudat, resolution = 0.5)
DimPlot(seudat, reduction = "umap")
DimPlot(seudat, reduction = "tsne")
DimPlot(seudat, reduction = "umap")
seudat <- FindClusters(seudat, resolution = 0.3)
DimPlot(seudat, reduction = "umap")
saveRDS(seudat,file = "seudat.rds")
?FindAllMarkers
log10(1.5)
log10(1.2)
markers <- FindAllMarkers(seudat,logfc.threshold = 0.25,only.pos = TRUE,max.cells.per.ident =200)
markers <- FindAllMarkers(seudat,logfc.threshold = 0.25,only.pos = TRUE)
markers <- FindAllMarkers(seudat,logfc.threshold = 0.25,only.pos = TRUE,max.cells.per.ident =500)
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1)
library(dplyr)
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1)
VlnPlot(seudat, features = c(EPCAM,KRT7, KRT8, KRT17,SPRR3), slot = "counts", log = TRUE)
VlnPlot(seudat, features = c("EPCAM","KRT7", "KRT8", "KRT17","SPRR3"), slot = "counts", log = TRUE)
epi_marker<-c("EPCAM","KRT7", "KRT8", "KRT17","SPRR3")
FeaturePlot(pbmc, features = epi_marker)
FeaturePlot(seudat, features = epi_marker)
DimPlot(seudat, reduction = "umap")
VlnPlot(seudat, features = T_marker, slot = "counts", log = TRUE)
T_marker<-c('CD3E', 'CD3D', 'TRBC1', 'TRAC')
B_marker<-c('CD79A','CD79B', 'JCHAIN', 'IGKC', 'IGHG3')
M_marker<-c('LYZ', 'CD86', 'CD68', 'FCGR3A')
Fib_marker<-c('DCN', 'C1R', 'COL1A1', 'ACTA2')
VlnPlot(seudat, features = T_marker, slot = "counts", log = TRUE)
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)
B_marker<-c('CD79A','CD79B')
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)
M_marker<-c('LYZ', 'CD86', 'CD68', 'FCGR3A')
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)
Fib_marker<-c('DCN', 'C1R', 'COL1A1', 'ACTA2')
VlnPlot(seudat, features = Fib_marker, slot = "counts", log = TRUE)#
Endo_marker<-c('CLDN5', 'FLT1', 'CDH1', 'RAMP2')
VlnPlot(seudat, features = Endo_marker, slot = "counts", log = TRUE)#8
mast_marker<-c('TPSAB1')
VlnPlot(seudat, features = mast_marker, slot = "counts", log = TRUE)#8
muscle<-c('TAGLN', 'CNN1')
VlnPlot(seudat, features = muscle, slot = "counts", log = TRUE)#13
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 10) %>%
ungroup() -> top10
DoHeatmap(seudat, features = top10$gene) + NoLegend()
seudat <- FindClusters(seudat, resolution = 0.2)
DimPlot(seudat, reduction = "umap")
markers <- FindAllMarkers(seudat,logfc.threshold = 0.25,only.pos = TRUE,max.cells.per.ident =500)
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top10
DoHeatmap(seudat, features = top10$gene) + NoLegend()
epi_marker<-c("EPCAM","KRT7", "KRT8", "KRT17","SPRR3")
VlnPlot(seudat, features = epi_marker, slot = "counts", log = TRUE)
epi_marker<-c("EPCAM","KRT7", "KRT8")
VlnPlot(seudat, features = epi_marker, slot = "counts", log = TRUE)
T_marker<-c('CD3E', 'CD3D', 'TRBC1', 'TRAC')
B_marker<-c('CD79A','CD79B')
M_marker<-c('LYZ', 'CD86', 'CD68', 'FCGR3A')
Fib_marker<-c('DCN', 'C1R', 'COL1A1', 'ACTA2')
mast_marker<-c('TPSAB1')
VlnPlot(seudat, features = T_marker, slot = "counts", log = TRUE)#3,6
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)#2,10
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4
VlnPlot(seudat, features = Fib_marker, slot = "counts", log = TRUE)#8
VlnPlot(seudat, features = mast_marker, slot = "counts", log = TRUE)#13
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4,10
M_marker<-c('SEPP1','C1QA','APOE','CD14','RNASE1')
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4,10
DC_marker<-c('HLA-DRA','HLA-DPB1','CST3','HLA-DPA1')
VlnPlot(seudat, features = DC_marker, slot = "counts", log = TRUE)#4
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)#3,8
VlnPlot(seudat, features = DC_marker, slot = "counts", log = TRUE)#7
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4
M_marker<-c('LYZ', 'CD86', 'CD68')
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4
M_marker<-c('SEPP1','C1QA','APOE','CD14','RNASE1')
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4
dc_marker<-c('HLA-DRA','HLA-DPB1','CST3','HLA-DPA1')#mDC
VlnPlot(seudat, features = dc_marker, slot = "counts", log = TRUE)#4
VlnPlot(seudat, features = Fib_marker, slot = "counts", log = TRUE)#6
VlnPlot(seudat, features = T_marker, slot = "counts", log = TRUE)#1,5
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)#3,8
VlnPlot(seudat, features = M_marker, slot = "counts", log = TRUE)#4
VlnPlot(seudat, features = dc_marker, slot = "counts", log = TRUE)#7
Neu_marker<-c('S100A8','CXCL8','SOD2','NAMPT')
VlnPlot(seudat, features = Neu_marker, slot = "counts", log = TRUE)#11
levels(seudat)
anno.ids <- c("Epithelial", "Tcell","Epithelial", "Bcell","Macrophage","Tcell","Fibroblasts","DC","Bcell","Epithelial","Neutrophil","Mast")
names(anno.ids) <- levels(seudat)
seudat <- RenameIdents(seudat, anno.ids)
DimPlot(seudat, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
pDC_marker<-c('PTGDS','SOX4','GZMB','IRF7')
VlnPlot(seudat, features = dc_marker, slot = "counts", log = TRUE)#7
VlnPlot(seudat, features = B_marker, slot = "counts", log = TRUE)#3,8
VlnPlot(seudat, features = pDC_marker, slot = "counts", log = TRUE)#10
levels(seudat)
seudat
Idents(seudat)<-seudat@meta.data$RNA_snn_res.0.2
seudat
VlnPlot(seudat, features = pDC_marker, slot = "counts", log = TRUE)#8
VlnPlot(seudat, features = dc_marker, slot = "counts", log = TRUE)#7
anno.ids <- c("Epithelial", "Tcell","Epithelial", "Bcell","Macrophage","Tcell","Fibroblasts","DC","pDC","Epithelial","Neutrophil","Mast")
names(anno.ids) <- levels(seudat)
seudat <- RenameIdents(seudat, anno.ids)
DimPlot(seudat, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
saveRDS(seudat,file="seudat.rds")
ls()
seudat
seudat$annotation<-Idents(seudat)
library(Seruat)
library(Seurat)
seudat$annotation<-Idents(seudat)
DimPlot(seudat, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
saveRDS(seudat,file="/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/WorkFiles/标书张老师/单细胞课件/seudat.rds")
BiocManager::install("harmony", version = "3.8")
BiocManager::install("harmony")
BiocManager::install("harmony", force = TRUE)
packageVersion("seurate")
packageVersion("Seurat")
library(scPagwas)
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Wed Apr 24 19:35:07 2024 ------##
##------ Wed Apr 24 19:35:10 2024 ------##
##------ Wed Apr 24 19:35:17 2024 ------##
##------ Wed Apr 24 19:35:17 2024 ------##
##------ Wed Apr 24 19:35:17 2024 ------##
##------ Wed Apr 24 19:35:17 2024 ------##
##------ Wed Apr 24 19:35:27 2024 ------##
##------ Wed Apr 24 19:35:27 2024 ------##
##------ Wed Apr 24 19:35:29 2024 ------##
packageVersion("scPagwas")
packageVersion("Seruat")
packageVersion("Seurat")
(287.4-260)/1080
(287.4-260)/1080*10000
(287.4-260)/10800*10000
leuk.frac<-read.table("/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/Cancer_Gwas/Runtime2.0/5.tcga_analysis/TCGA_all_leuk_estimate.masked.20170107.tsv")
#查看CancerType的类别
colnames(leuk.frac)<-c('CancerType','samples','LeukFrac')
unique(leuk.frac$CancerType)
#对unique(leuk.frac$CancerType)分类
ad<-list(
"PCPG"=c("ACC","PCPG"),
"BLCA"=c("BLCA") ,
"BRCA"=c("BRCA" ),
"CESC"=c( "CESC"),
"COREAD"=c("COAD", "READ"),
"ESCA" =c("ESCA"),
"BC"=c("GBM" , "LGG"),
"HNSC" =c("HNSC"),
"RCC"=c("KICH" ,"KIRC","KIRP" ),
"LIHC" =c("LIHC"),
"NCSLC"=c("LUAD", "LUSC"),
"OV"  =c("OV" ),
"PAAD" =c("PAAD"),
"PRAD" =c("PRAD"),
"SKCM" =c("SKCM"),
"STAD" =c("STAD"),
"THCA" =c("THCA"),
"UCEC"=c("UCEC", "UCS"),
"EAC"=c("UVM"),
"TGCT"=c("TGCT"))
M1<-c("BRCA","LUAD", "LUSC","SKCM","STAD","THCA","UCEC")
M2<-c("COAD", "READ","ESCA","PAAD")
M3<-c("OV" ,"PRAD","HNSC","KICH" ,"KIRC","KIRP","LIHC")
leuk.frac<-leuk.frac[leuk.frac$CancerType %in% c(M1,M2,M3),]
leuk.frac$Type<-"Module3"
leuk.frac$Type[leuk.frac$CancerType %in% M1]<-"Module1"
leuk.frac$Type[leuk.frac$CancerType %in% M2]<-"Module2"
leuk.frac$LeukFrac<-as.numeric(leuk.frac$LeukFrac)
p <- ggplot(leuk.frac, aes(x = Type, y = LeukFrac, fill = Type)) +
geom_violin() +
geom_boxplot(width = 0.1) +
stat_summary(fun = "mean", geom = "point", shape = 20, size = 3) +
theme_minimal()+
scale_fill_manual(values=c("#DF826C","#9FBB73","#7C93C3"))+
geom_signif(step_increase = c(0.1,0.1,0.1), comparisons=list(c("Module1","Module2"),c("Module1","Module3"),"Module2","Module3"),
map_signif_level=c("***"=0.001, "**"=0.01, "*"=0.05), textsize=2,tip_length=0.03)
library(ggplot2)
library(dplyr)
library("ggsignif")
p <- ggplot(leuk.frac, aes(x = Type, y = LeukFrac, fill = Type)) +
geom_violin() +
geom_boxplot(width = 0.1) +
stat_summary(fun = "mean", geom = "point", shape = 20, size = 3) +
theme_minimal()+
scale_fill_manual(values=c("#DF826C","#9FBB73","#7C93C3"))+
geom_signif(step_increase = c(0.1,0.1,0.1), comparisons=list(c("Module1","Module2"),c("Module1","Module3"),"Module2","Module3"),
map_signif_level=c("***"=0.001, "**"=0.01, "*"=0.05), textsize=2,tip_length=0.03)
p
pairwise_comparisons <- pairwise.wilcox.test(leuk.frac$LeukFrac, leuk.frac$Type, p.adjust.method = "BH")
p_values <- pairwise_comparisons$p.value
p_values
ggsave(p,file="Figure3G_LeukFrac_diff_module.pdf",width=6,height=5)
ggsave(p,file="/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/Cancer_Gwas/Runtime_final/Figures/Figure3/Figure3G_LeukFrac_diff_module.pdf",width=6,height=5)
library(ggplot2)
library(dplyr)
library("ggsignif")
setwd("/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/Cancer_Gwas/Runtime_final/Figures/")
TMB_OS<-read.csv("Figure3/TMB_OS.csv",header = T,sep = ",")
#处理TMB.median.interquartile中类似151(85-269)的数据，只保留151
TMB_OS$TMB.median<-gsub("\\(.*\\)","",TMB_OS$TMB.median.interquartile)
#将TMB.median.interquartile转换为数值型
TMB_OS$TMB.median<-as.numeric(TMB_OS$TMB.median)
ca<-intersect(c(M1,M2,M3),TMB_OS$tumor)
TMB_OS<-TMB_OS[TMB_OS$tumor %in% ca,]
M1<-c("BRCA","LUAD", "LUSC","SKCM","STAD","THCA","UCEC")
M2<-c("COAD", "READ","ESCA","PAAD")
M3<-c("OV" ,"PRAD","HNSC","KICH" ,"KIRC","KIRP","LIHC")
dd<-TMB_OS[,c("tumor","TMB.median")]
dd$Type<-"Module1"
dd$Type[dd$tumor %in% M2]<-"Module2"
dd$Type[dd$tumor %in% M3]<-"Module3"
dd$Type<-"TRC-T"
dd$Type[dd$tumor %in% M2]<-"TRC-B"
dd$Type[dd$tumor %in% M3]<-"TRC-Myeloid"
dd<-dd[order(dd$TMB.median,decreasing=T),]
dd$tumor<-factor(dd$tumor,levels=dd$tumor)
p_tmb<-ggplot(data=dd, mapping=aes(x = tumor, y =TMB.median,fill=Type))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#DF826C","#9FBB73","#7C93C3"))+
theme_classic()+theme(axis.text.x = element_text(angle = 90,vjust = 1,hjust = 1),legend.position = "top")+
labs(y = "TMB")
ggsave(p_tmb,file="Figure3I_TMB_diff_module.pdf",width=6,height=5)
dNdS_escape<-read.csv("dNdS_escape.csv",header = T,sep = ",")
dNdS_escape<-read.csv("dNdS_escape.csv",header = T,sep = ",")
getwd()
setwd("/Users/chunyudeng/Library/CloudStorage/OneDrive-共享的库-Onedrive/Cancer_Gwas/Runtime_final/Figures/Figure3/")
ggsave(p_tmb,file="Figure3I_TMB_diff_module.pdf",width=6,height=5)
dNdS_escape<-read.csv("dNdS_escape.csv",header = T,sep = ",")
dNdS_escape<-dNdS_escape[,c("Tumor","Median.idN.dS.escaped","Median.IdN.dS.edited")]
ca<-intersect(c(M1,M2,M3),dNdS_escape$Tumor)
dNdS_escape<-dNdS_escape[dNdS_escape$Tumor %in% ca,]
dd<-dNdS_escape[,c("Tumor","Median.idN.dS.escaped")]
dd$Type<-"TRC-T"
dd$Type[dd$tumor %in% M2]<-"TRC-B"
dd$Type[dd$tumor %in% M3]<-"TRC-Myeloid"
dd<-dd[order(dd$Median.idN.dS.escaped,decreasing=T),]
dd$Tumor<-factor(dd$Tumor,levels=dd$Tumor)
p_dn<-ggplot(data=dd, mapping=aes(x = Tumor, y =Median.idN.dS.escaped,fill=Type))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#DF826C","#9FBB73","#7C93C3"))+
theme_classic()+theme(axis.text.x = element_text(angle = 90,vjust = 1,hjust = 1),legend.position = "top")+
labs(y = "Median.idN.dS.escaped")
ggsave(p_dn,file="Figure3J_Median.idN.dS.escaped_diff_module.pdf",width=6,height=5)
